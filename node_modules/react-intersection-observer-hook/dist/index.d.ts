type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

type IntersectionObserverHookArgs = Omit<IntersectionObserverInit, 'root'>;
type IntersectionObserverHookRefCallbackNode = Element | null;
type IntersectionObserverHookRefCallback = (node: IntersectionObserverHookRefCallbackNode) => void;
type IntersectionObserverHookRootRefCallbackNode = IntersectionObserverInit['root'];
type IntersectionObserverHookRootRefCallback = (node: IntersectionObserverHookRootRefCallbackNode) => void;
type IntersectionObserverHookResult = [
    IntersectionObserverHookRefCallback,
    {
        entry: IntersectionObserverEntry | undefined;
        rootRef: IntersectionObserverHookRootRefCallback;
    }
];
declare function useIntersectionObserver(args?: IntersectionObserverHookArgs): IntersectionObserverHookResult;

type TrackVisibilityHookArgs = IntersectionObserverHookArgs;
type TrackVisibilityHookResult = [
    IntersectionObserverHookResult[0],
    IntersectionObserverHookResult[1] & {
        isVisible: boolean;
        wasEverVisible: boolean;
    }
];
declare function useTrackVisibility(args?: IntersectionObserverHookArgs): TrackVisibilityHookResult;

export { type IntersectionObserverHookArgs, type IntersectionObserverHookRefCallback, type IntersectionObserverHookRefCallbackNode, type IntersectionObserverHookResult, type IntersectionObserverHookRootRefCallback, type IntersectionObserverHookRootRefCallbackNode, type TrackVisibilityHookArgs, type TrackVisibilityHookResult, useIntersectionObserver, useTrackVisibility };
